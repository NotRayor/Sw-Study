운영체제란?
응용프로그램과 하드웨어간 인터페이스,
그리고 응용프로그램의 실행을 제어하는 프로그램이다.

운영체제의 목적 4가지,
1. 편리성 - 컴퓨터를 편리하게 쓸 수 있도록 해준다.
2. 효율성 - 컴퓨터 자원을 효율적으로 사용하도록 돕는다.
ㄴ 처리능력, 단위 시간당 처리하는 작업량
ㄴ 신뢰도, 문제 없이 프로그램이 동작하는지,
ㄴ 응답시간, 사용자가 작업 의뢰 후, 응답이 올 때까지의 시간
ㄴ 사용가능도, 사용자가 일정기간 동안 컴퓨터를 실제 사용가능한 시간

3. 발전성 - 다양한 시스템 자원을 컴퓨터에 추가하거나 제거하기가 편리하게 해준다.
4. 안전성 - 운영체제가 돌아가면서, 큰 문제가 없이 잘 돌아가도록 해준다.
	문제 발생시, 리커버가 되야한다.
편효발안


운영체제의 역할,
1. 사용자 관점
사용자와 컴퓨터 간의 인터페이스

2. 시스템 관점
자원을 얼마나 효율적으로 관리하는 지.. 자원관리자로서의 운영체제


운영체제 계층구조
1. 커널(Kernel)
주메모리에 상주하는 운영체제의 핵심,
운영체제 = 커널 + 기타.. 라고 볼 수 있을 정도로 커널이 중요하다.

2. 쉘(Shell)
사용자와 커널 사이의 중간 역할 담당
사용자가 입력한 명령을 이해한 후에 실행한다.

3. 유틸리티 / 명령어..

운영체제의 기능,
1. 자원관리 기능
 1) 메모리 관리
 2) 프로세스 관리
 3) 장치 관리
 4) 파일 관리
메프장파

2. 시스템 관리 기능
시스템 보호, 네트워크, 명령해석

운영체제 서비스 종류들 4가지
1) 부트 스트래핑(부팅) 서비스
운영체제를 주기억장치에 적재하고 초기화한다.
부팅과 관련된 서비스이다. 

2) 사용자 서비스
프로그래머가 프로그래밍 작업을 쉽게 할 수 있도록 제공되는 서비스

3) 시스템 서비스
사용자가 아닌 시스템 자체의 효율적 동작을 보장하는 기능,

4) 시스템 호출 서비스 ( API ),
프로그램과 운영체제 간 인터페이스 ? 
4대 자원 관리를 사용자가 직접 핸들링 한다면.. 상호배제 역할을 운영체제가 수행하기 어려워지므로,
시스템 호출을 통해서만 자원관리에 대해 사용자가 접근해야한다.


운영체제 발전 과정에 대하여..
처리시스템 종류들

1. 순차처리
운영체제가 없다.
스위치 on off를 통해서 컴퓨터를 동작 시켰다.
스케줄링이 어렵고, 준비시간이 많이 걸렸다.

2. 단순 일괄 처리 시스템
모니터 소프트웨어
일련 이벤트를 제어하는 소프트웨어가 주기억장치에 상주,
배치작업을 관리했다.
작업 완료시, 제어가 모니터로 넘어가고, 모니터가 다음 작업을 읽는다..

3. 멀티 프로그래밍 일괄처리 시스템
단일의 경우엔, 처리기는 진행전에 IO명령어를 대기한다.

멀티프로그래밍은, 한 작업이 입출력 대기할때, 처리기는 다른 작업으로 제어를 넘긴다.
즉, 하나의 CPU지만, 병렬처리를 통해 대기시간을 줄인다. cpu의 시간을 번갈아가며 여러 개의 프로그램 동작

결과적으로 CPU 이용률이 극대화.. 목적이기도 하다

4. 시분할 시스템,
여러 개의 대화형 작업들을 이루기 적합하다.
하나의 메인프레임 컴퓨터에 여러개의 터미널 역할을 하는 컴퓨터들이 접속하는 느낌..
우리 학교의 리눅스 시스템의 경우에 해당한다.

처리기 시간을 여러 사용자들이 나눠사용한다.

시분할 시스템의 경우 목적은, CPU의 효율도 중요하지만 더 중요한 목적은 사용자에 대한 응답시간 최소화이다.


운영체제 오류의 주원인 4가지
1. 부적절한 동기화
 잘못 설계된 신호주고받기 메커니즘이 데이터를 잃거나 중복수신하도록 만든다.

2. 상호배제의 실패
 여러 사용자, 프로그램이 동시에 공유자원을 사용하려 시도한 경우에
	한번에 한 루틴만이 공유자원에 대한 업데이트를 할 수 있도록 허용해야함.

3. 비결정적 프로그램 실행
메모리를 나눠쓰는 여러 프로그램들은 처리기에 의해 번걸아 가며 실행된다.
이때 스케줄링 순서에 따라 실행 결과가 달라지는 현상 ( 종속성 문제 )

4. 교착상태
두개 이상 프로그램들이 서로 상대방의 실행을 기다림으로써, 무한 대기에 빠져버린다.

프로세스 구성요소 3가지
1. 실행 가능한 프로그램
2. 프로그램 수행에 필요한 데이터 ( 변수, 작업공간, 버퍼 등 )
3. 프로그램의 실행 문맥 ( 혹은 프로세스 상태 ) 

운영체제는 실행 문맥을 통해 프로세스를 제어하고 감시한다.
그래서, 문맥 속에는 다양한 레지스터 값과 정보가 포함되어있다.

메모리 관리를 위해, 운영체제가 지원하는 5가지 종류
1. 프로세스 분리
관계없는 프로세스들 사이에는 서로 데이터나 메모리를 침범할 수 없도록 보호한다.

2. 자동할당 및 관리
메모리 계층구조에 의거, 메모리를 동적으로 회수하거나 할당하는 등의 
자동적 메모리 관리

3. 모듈식 프로그래밍
프로그래머는 프로그램 모듈을 정의,작성,삭제하고 크기를 동적으로 바꿀 수 있어야한다.

4. 보호 및 접근 제어
프로세스간 메모리 공유에 대한 허용, 금지 등의 관리, 1번과 관계가 깊다.

5. 영구적 저장 자원
많은 응용프로그램들은 전원을 꺼도 유지되는 정보저장 수단(HDD..)을 필요로 한다.


가상메모리는 무엇일까?
주 메모리의 양과 관계없이 논리적 관점에서 메모리 주소지정을 할 수 있게 해주는 기법,
프로그래머가 논리적 관점을 가지고 메모리에 접근할 수 있도록 한다. > 가상 주소

페이징,
프로세스 메모리를 페이지라고 하는 고정-크기 블록 단위로 잘라 관리하는 기법이다.
프로그램은 가상주소를 통해 워드에 접근해야한다.




개념 및 용어
버퍼링 - 주기억장치 일부를 버퍼로 사용하고, 일정량의 데이터를 모아서 일괄처리하는 방법으로 속도를 향상시킨다.
스풀링 - 디스크의 일부를 스풀공간이라 불리는, 매우 큰 버퍼로 활용하는 방식,
프로세스 - 컴퓨터 시스템이 발전되면서, 타이밍과 동기화의 문제가 야기되어,
	타이밍, 동기화를 관리하기 위해 프로세스라는 작업의 단위개념이 탄생했다.
루틴 - 동작에 대한 과정
스와핑 - 주기억장치에 적재된 하나의 프로그램과 보조기억장치에 적재한 다른 프로그램 메모리를 교체하는 기법
swap out - 시스템 안에 메모리가 상당히 부족하다고 판단되면, 프로그램을 통쨰로 메모리에서 내보내는 데,
	이러한 동작을 swap out이라고 한다.













