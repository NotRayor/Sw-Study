알고리즘 설계는 생각보다 더, 여러 전략적인 선택에 좌우된다.
1. 해결할 문제의 특성을 이해
2. 동작 시간과 사용하는 공간 사이의 상충관계를 이해
3. 적절한 자료구조를 선택

알고리즘 설계 패러다임,
주어진 문제를 해결하기 위해 알고리즘이 채택한 전략이나 관점.

어떤 알고리즘들은 문제를 해결하기 위한 가장 중요한 깨달음을 공유한다.
이런 경우에, 일종의 패턴을 파악할 수 있고,
이들은 같은 전략 혹은 같은 설계 패러다임을 통해 문제를 해결했다고 한다..

알고리즘 설계 패러다임은, 알고리즘 설계의 좋은 틀이 되므로
이들에 대해 공부하는 것은 설계 능력을 키우는데 도움이 된다.


======
1. 무식하게 풀기 - 브루트 포스,
때때로 가장 많이 하는 실수 중 하나는, 쉬운문제를 어렵게 푸는 것이다.
앞에 보이는 쉽고 간단한 답안을 간과하기 쉽다.. 이런 경우를 예방하기 위해
문제를 마주하면, 가장 먼저 스스로에게 물어봐라.
브루트 포스로 풀 수 있을 것인가.

브루트 포스는 컴퓨터의 빠른 연산능력을 이용해, 모든 경우의 수를
일일이 나열하며 답을 찾는 방법을 의미한다.

입력의 크기가 낮게 제한된 경우에 유용하게 쓰인다.

1_1. 재귀호출( 재귀함수 )
재귀함수란, 자신이 수행할 작업을 유사한 형태의 여러조각으로 쪼갠 뒤,
그 중 한 조각을 수행하고, 나머지를 자기 자신을 호출해 실행하는 함수를 가리킵니다.

재귀호출에서, 더이상 쪼개지지 않는 최소한의 작업에 도달했을 때,
답을 곧장 반환하는 조건문을 포함하는데, 이러한 쪼개지지 않는 가장 작은 작업들을
재귀 호출의 기저사례라고 합니다.

문제의 특성에 따라서는, 재귀호출은 코딩을 훨씬 간편하게 해준다.

ex. 보글게임,
상하좌우/대각선으로 인접한 칸들의 글자들을 이어서 단어를 찾아내는 게임,
각 글자는 대각선으로도 이어질 수 있으며, 한글자가 두번 이상 사용될 수도 있습니다.
주어진 칸에서 시작해, 특정 단어를 찾을 수 있는지 확인하는 문제를 풀어보자.

hasWord(x,y,word) 게임판의 (x,y)에서 시작하는 단어 word의 존재 여부를 반환한다.
완전탐색을 이용할 것이다.

문제의 분할,
문제를 각 글자당 하나의 조각으로 만들면 된다.
함수 호출 시, 단어의 시작 위치를 정해주기 때문에, 문제의 조각들 중 첫번째 글자에
해당하는 조각은 간단하게 해결할 수 있습니다.
시작 위치에 있는 글자가 찾으려는 단어 첫글자와 다르다면 바로 false 반환 후 종료하면 된다.
그 이후, word에서 첫 글자를 땐 word[1..] 격자를 찾아야한다. 시작위치에 인접한
8칸 중 하나일 것..

기저사례는?
더이상 탐색 없이 간단히 답을 낼 수 있는 다음 경우들을 기저사례로 선택.
1. 위치(x,y)에 글자가 원하는 단어의 첫글자가 아닌 경우, 항상 실패
2. 1번 경우에 해당하지 않는다면, ) 원하는 단어가 한글자인 경우 항상 성공,
그외에.. 코드를 간결히 하기 위해, 입력 잘못 혹은 범위를 벗어난 경우도
기저사례로 선정한다.
현재 위치가 보글 게임판을 벗어나거나, 첫글자가 일치하지 않는 경우 모두 기저사례로 선택.

substr(1); 시작위치부터 끝까지를 문자열로 반환한다.

재귀호출의 중요한 개념..
문제와 부분 문제 정의,
정의는 3부의 뒤에 다룰 동적 계획법이나, 분할 정복 같은
중요한 디자인 패러다임을 설명하는데 사용된다.
쉽게 생각할 수 있는 직관과 차이가 있습니다.

주어진 자연수 수열을 정렬하라,
{16,7,9,1,31}을 정렬하라.

같은 문제같지만, 정의에 큰 차이가 있다.
첫번째 문제는 입력이 주어지지 않았고,
두번째 문제는 입력이 주어졌다는 것이다.
{3,2,1}과 {1,2,3}을 정렬해라.. 이 두문제는 서로 다른 문제..
그러니까 앞에서의 2번째문제만 문제의 정의라고 한다.

우리가 진행한 보글게임에서
게임판에서의 현재 위치 y,x 그리고 단어 word가 주어질때,
해당 단어를 이 칸에서부터 시작해서 찾을 수 있는 가? 였다.

해당 단어를 이 위치에서 찾을 수 있는 지 알기 위해서는 9가지 정보를 알아야했다.
1. 현재 위치 y,x단어의 첫글자가 있는가?
2. 윗칸y-1,x부터 시작해서 나머지 글자들을 찾을 수 있는가
3. 왼쪽 윗칸 .....
4. ...
5. ...

이중 2번 이후 항목은, 원래 문제에서 한조각을 때어낸 것 뿐,
형식이 같은 또 다른 문제를 푼 결과.. 문제를 구성하는 조각들 중 하나를 뺀 것으로,
이 문제들은 원래 문제의 일부라고 볼 수 있다.
이런 문제를 부분문제라고 한다.
















